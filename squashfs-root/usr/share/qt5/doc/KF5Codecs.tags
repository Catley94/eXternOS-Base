<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>kemailaddress.h</name>
    <path>/workspace/build/src/</path>
    <filename>kemailaddress_8h</filename>
    <namespace>KEmailAddress</namespace>
    <member kind="enumeration">
      <type></type>
      <name>EmailParseResult</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>gadc2d42daf24ca8b10c388aba8591fcd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AddressOk</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a45243beb78125b14aa00d49d1cb995ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AddressEmpty</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a6a7e808f46d0579c939dfdc75d70eff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnexpectedEnd</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a84f43f631b8f1ae23f2c208ff948fb8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnbalancedParens</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a16b0b364c2347eaa3d1b74ffb2b0caf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MissingDomainPart</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a1bd296accb6a4e3c2e7bc637d81d8065</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnclosedAngleAddr</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8aede38826223185bbf9ccff119ed4fb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnopenedAngleAddr</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8ac484f44e18a99c9601896f0e10f7514c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TooManyAts</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a3d19df0222fba79c1de04fc0f1639139</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnexpectedComma</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a23060c3639e86558293bfddcedf9542e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TooFewAts</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a487f1bd7f83580afbd9283aa5b366dc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MissingLocalPart</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8af68db225fc1b9f7e57e819dfed17156b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnbalancedQuote</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a0e72bc2fe61077caef9c42931eada4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DisallowedChar</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8aaaa0e1f433ce98621480ceed5b68762d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidDisplayName</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a5e40533d5344018c1b3b9276abf6bcfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TooFewDots</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a2c9ea07b1cc9cc949d4690bcc0e6310a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareEmail</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga9cf07bd2a58b8559334b082003fdba43</anchor>
      <arglist>(const QString &amp;email1, const QString &amp;email2, bool matchName)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>decodeMailtoUrl</name>
      <anchorfile>namespaceKEmailAddress.html</anchorfile>
      <anchor>a8d23df8a45aefe06acc0ef87ed121d6a</anchor>
      <arglist>(const QUrl &amp;mailtoUrl)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>emailParseResultToString</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>gae172704df0b6b5f39245919d47670400</anchor>
      <arglist>(EmailParseResult errorCode)</arglist>
    </member>
    <member kind="function">
      <type>QUrl</type>
      <name>encodeMailtoUrl</name>
      <anchorfile>namespaceKEmailAddress.html</anchorfile>
      <anchor>a8932bbff25f1acf10e43dcd80d8bbbe0</anchor>
      <arglist>(const QString &amp;mailbox)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>extractEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga1da04912802dd81372f09d81d5b62182</anchor>
      <arglist>(const QByteArray &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>extractEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga8d3f8bfe69ddce019c2e1901ead2174d</anchor>
      <arglist>(const QByteArray &amp;address, QString &amp;errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>extractEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>gae74d8378c98d252905e20580b2bb5614</anchor>
      <arglist>(const QString &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>extractEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>gaa161e55130d4b9975e33968df6bb0ede</anchor>
      <arglist>(const QString &amp;address, QString &amp;errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extractEmailAddressAndName</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga6c22c387968e1e515858afa50b65d7fe</anchor>
      <arglist>(const QString &amp;aStr, QString &amp;mail, QString &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>firstEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>gaa8fcb8ca19ea885161a89e3b6a9e680d</anchor>
      <arglist>(const QByteArray &amp;addresses)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>firstEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga26e2155efb91415fef8d129dc22e5852</anchor>
      <arglist>(const QByteArray &amp;addresses, QString &amp;errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>firstEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>gab37177a353e63490f70c7cb1b9f14bd5</anchor>
      <arglist>(const QString &amp;addresses)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>firstEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga0855fc94ddbf97bf7089b6b5d7906e0f</anchor>
      <arglist>(const QString &amp;addresses, QString &amp;errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>fromIdn</name>
      <anchorfile>group__emailidn.html</anchorfile>
      <anchor>ga066e392380fbc155ac9f81f73071a88e</anchor>
      <arglist>(const QString &amp;addrSpec)</arglist>
    </member>
    <member kind="function">
      <type>EmailParseResult</type>
      <name>isValidAddress</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga0718eac74f9d7e24b14dd230fc4726cb</anchor>
      <arglist>(const QString &amp;aStr)</arglist>
    </member>
    <member kind="function">
      <type>EmailParseResult</type>
      <name>isValidAddressList</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga726399c1d5ae00c2ed8fb9a8248ece53</anchor>
      <arglist>(const QString &amp;aStr, QString &amp;badAddr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidSimpleAddress</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>gabf08e03f2e2bd68905e76444c7e177d5</anchor>
      <arglist>(const QString &amp;aStr)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>normalizeAddressesAndDecodeIdn</name>
      <anchorfile>group__emailidn.html</anchorfile>
      <anchor>ga2c7bcc1fcb43afe6bd1fb8f4aeaccfaa</anchor>
      <arglist>(const QString &amp;addresses)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>normalizeAddressesAndEncodeIdn</name>
      <anchorfile>group__emailidn.html</anchorfile>
      <anchor>ga0db66b33487cb73dd1a7ec3e8bced4d4</anchor>
      <arglist>(const QString &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>normalizedAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga0c6a693a9b2d6395e39073c61712c1ff</anchor>
      <arglist>(const QString &amp;displayName, const QString &amp;addrSpec, const QString &amp;comment=QString())</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>quoteNameIfNecessary</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga3fa01cff1e4d8ba9e3a7647723c416fe</anchor>
      <arglist>(const QString &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>simpleEmailAddressErrorMsg</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga53bb072b3bb705a6b933dcb03c9f206a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EmailParseResult</type>
      <name>splitAddress</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga866c90ba0d3dba47be1e1c8eea104468</anchor>
      <arglist>(const QByteArray &amp;address, QByteArray &amp;displayName, QByteArray &amp;addrSpec, QByteArray &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>EmailParseResult</type>
      <name>splitAddress</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga1fbb08d0380070bc9907eb34c6664476</anchor>
      <arglist>(const QString &amp;address, QString &amp;displayName, QString &amp;addrSpec, QString &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>QStringList</type>
      <name>splitAddressList</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga772a8e69044154ce0935250558778ddd</anchor>
      <arglist>(const QString &amp;aStr)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>toIdn</name>
      <anchorfile>group__emailidn.html</anchorfile>
      <anchor>ga65e6620e7b4685c45c6a516fc1a22ca3</anchor>
      <arglist>(const QString &amp;addrSpec)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KCodecs::Codec</name>
    <filename>classKCodecs_1_1Codec.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Codec</name>
      <anchorfile>classKCodecs_1_1Codec.html</anchorfile>
      <anchor>adab2df57076f0ce7bac711def34561ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>decode</name>
      <anchorfile>classKCodecs_1_1Codec.html</anchorfile>
      <anchor>a0538399caa4245db591311d3265f2ae5</anchor>
      <arglist>(const char *&amp;scursor, const char *const send, char *&amp;dcursor, const char *const dend, NewlineType newline=NewlineLF) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual QByteArray</type>
      <name>decode</name>
      <anchorfile>classKCodecs_1_1Codec.html</anchorfile>
      <anchor>ab0ca8879963422135c16419da56ae26e</anchor>
      <arglist>(const QByteArray &amp;src, NewlineType newline=NewlineLF) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>encode</name>
      <anchorfile>classKCodecs_1_1Codec.html</anchorfile>
      <anchor>aff4d448d299d13ca43bbb66c32fe40a3</anchor>
      <arglist>(const char *&amp;scursor, const char *const send, char *&amp;dcursor, const char *const dend, NewlineType newline=NewlineLF) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual QByteArray</type>
      <name>encode</name>
      <anchorfile>classKCodecs_1_1Codec.html</anchorfile>
      <anchor>abead67df182cddba0efb07799a97efd4</anchor>
      <arglist>(const QByteArray &amp;src, NewlineType newline=NewlineLF) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Decoder *</type>
      <name>makeDecoder</name>
      <anchorfile>classKCodecs_1_1Codec.html</anchorfile>
      <anchor>a0bad125ce87f7297fc092f4bf3ffa518</anchor>
      <arglist>(NewlineType newline=NewlineLF) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Encoder *</type>
      <name>makeEncoder</name>
      <anchorfile>classKCodecs_1_1Codec.html</anchorfile>
      <anchor>af682d5c7a1ccf5f8efe69c5acd0c3f8a</anchor>
      <arglist>(NewlineType newline=NewlineLF) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>maxDecodedSizeFor</name>
      <anchorfile>classKCodecs_1_1Codec.html</anchorfile>
      <anchor>a58bb65a6556c1d7b6b5abb2084ec1d65</anchor>
      <arglist>(int insize, NewlineType newline=NewlineLF) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>maxEncodedSizeFor</name>
      <anchorfile>classKCodecs_1_1Codec.html</anchorfile>
      <anchor>abbca5be2e16728ee4d2c827345d85f67</anchor>
      <arglist>(int insize, NewlineType newline=NewlineLF) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classKCodecs_1_1Codec.html</anchorfile>
      <anchor>a8b3be21a8cfe9cb77c421a9f6c978524</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Codec *</type>
      <name>codecForName</name>
      <anchorfile>classKCodecs_1_1Codec.html</anchorfile>
      <anchor>a0f1fbc90cb2abc9d33741c2c34ac1da7</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Codec *</type>
      <name>codecForName</name>
      <anchorfile>classKCodecs_1_1Codec.html</anchorfile>
      <anchor>ab12a86d0a79dea724166f2c36d05765e</anchor>
      <arglist>(const QByteArray &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Codec</name>
      <anchorfile>classKCodecs_1_1Codec.html</anchorfile>
      <anchor>a6f3d722512cf092a123b9f9efba99a70</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="classKCodecs_1_1Codec">MIME</docanchor>
    <docanchor file="classKCodecs_1_1Codec">mime</docanchor>
    <docanchor file="classKCodecs_1_1Codec">codec</docanchor>
    <docanchor file="classKCodecs_1_1Codec">codecs</docanchor>
    <docanchor file="classKCodecs_1_1Codec">Codec</docanchor>
    <docanchor file="classKCodecs_1_1Codec">Codecs</docanchor>
    <docanchor file="classKCodecs_1_1Codec">CRLF</docanchor>
    <docanchor file="classKCodecs_1_1Codec">LF</docanchor>
  </compound>
  <compound kind="class">
    <name>KCodecs::Decoder</name>
    <filename>classKCodecs_1_1Decoder.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Decoder</name>
      <anchorfile>classKCodecs_1_1Decoder.html</anchorfile>
      <anchor>ac651098635fa6f3861db605a3cadcdf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>decode</name>
      <anchorfile>classKCodecs_1_1Decoder.html</anchorfile>
      <anchor>afd751ebf6571a91e21b1790f703bea76</anchor>
      <arglist>(const char *&amp;scursor, const char *const send, char *&amp;dcursor, const char *const dend)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>finish</name>
      <anchorfile>classKCodecs_1_1Decoder.html</anchorfile>
      <anchor>aea94ec514d5726c9baed50022f445ab7</anchor>
      <arglist>(char *&amp;dcursor, const char *const dend)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Decoder</name>
      <anchorfile>classKCodecs_1_1Decoder.html</anchorfile>
      <anchor>a6115edd39ad52ab89721d45c4aa20159</anchor>
      <arglist>(Codec::NewlineType newline=Codec::NewlineLF)</arglist>
    </member>
    <docanchor file="classKCodecs_1_1Decoder">Overview</docanchor>
    <docanchor file="classKCodecs_1_1Decoder" title="Values">Return</docanchor>
    <docanchor file="classKCodecs_1_1Decoder" title="Pattern">Usage</docanchor>
  </compound>
  <compound kind="class">
    <name>KCodecs::Encoder</name>
    <filename>classKCodecs_1_1Encoder.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Encoder</name>
      <anchorfile>classKCodecs_1_1Encoder.html</anchorfile>
      <anchor>a67e088cdc127ede08372b2fec61c7832</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>encode</name>
      <anchorfile>classKCodecs_1_1Encoder.html</anchorfile>
      <anchor>acf5e6a6e82031987ef7f574aa2801ab6</anchor>
      <arglist>(const char *&amp;scursor, const char *const send, char *&amp;dcursor, const char *const dend)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>finish</name>
      <anchorfile>classKCodecs_1_1Encoder.html</anchorfile>
      <anchor>adc465c35d0cff9b3a00fc696af474f01</anchor>
      <arglist>(char *&amp;dcursor, const char *const dend)=0</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>maxBufferedChars</name>
      <anchorfile>classKCodecs_1_1Encoder.html</anchorfile>
      <anchor>ae1334f4a9d82bbbda2b61dad3568ba3ea487440ab9162d3f4c3a22a0ebf879cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>maxBufferedChars</name>
      <anchorfile>classKCodecs_1_1Encoder.html</anchorfile>
      <anchor>ae1334f4a9d82bbbda2b61dad3568ba3ea487440ab9162d3f4c3a22a0ebf879cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Encoder</name>
      <anchorfile>classKCodecs_1_1Encoder.html</anchorfile>
      <anchor>ac78e44d7d606ea9656511f03781f65e2</anchor>
      <arglist>(Codec::NewlineType newline=Codec::NewlineLF)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>flushOutputBuffer</name>
      <anchorfile>classKCodecs_1_1Encoder.html</anchorfile>
      <anchor>a94bd0a857159baa25598c482facda894</anchor>
      <arglist>(char *&amp;dcursor, const char *const dend)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classKCodecs_1_1Encoder.html</anchorfile>
      <anchor>a71dd62f269a0dc50ce09428d5a553f4f</anchor>
      <arglist>(char ch, char *&amp;dcursor, const char *const dend)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeCRLF</name>
      <anchorfile>classKCodecs_1_1Encoder.html</anchorfile>
      <anchor>ad18e7d17af536326b5656d6911b59e91</anchor>
      <arglist>(char *&amp;dcursor, const char *const dend)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KCharsets</name>
    <filename>classKCharsets.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KCharsets</name>
      <anchorfile>classKCharsets.html</anchorfile>
      <anchor>aba4d5a8ab0b5aa5593afeefc6a660842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QStringList</type>
      <name>availableEncodingNames</name>
      <anchorfile>classKCharsets.html</anchorfile>
      <anchor>a75b547314133c05382bd14a86b8768d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>QTextCodec *</type>
      <name>codecForName</name>
      <anchorfile>classKCharsets.html</anchorfile>
      <anchor>a02ee3c0d75b3bbee3b2d2c3972fa22fa</anchor>
      <arglist>(const QString &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>QTextCodec *</type>
      <name>codecForName</name>
      <anchorfile>classKCharsets.html</anchorfile>
      <anchor>a933e59807eeb0e13f17624de691bc37e</anchor>
      <arglist>(const QString &amp;n, bool &amp;ok) const</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>descriptionForEncoding</name>
      <anchorfile>classKCharsets.html</anchorfile>
      <anchor>aa584fcc09c13cb960e5e79c2235c73cd</anchor>
      <arglist>(const QString &amp;encoding) const</arglist>
    </member>
    <member kind="function">
      <type>QStringList</type>
      <name>descriptiveEncodingNames</name>
      <anchorfile>classKCharsets.html</anchorfile>
      <anchor>a0e5819ce06dad8323198eb25c908721f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>encodingForName</name>
      <anchorfile>classKCharsets.html</anchorfile>
      <anchor>a404047e3d928133c0e0651c0651f7946</anchor>
      <arglist>(const QString &amp;descriptiveName) const</arglist>
    </member>
    <member kind="function">
      <type>QList&lt; QStringList &gt;</type>
      <name>encodingsByScript</name>
      <anchorfile>classKCharsets.html</anchorfile>
      <anchor>abd05748329bd414df3989d88b87fc745</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KCharsets *</type>
      <name>charsets</name>
      <anchorfile>classKCharsets.html</anchorfile>
      <anchor>a7d15bd947ba64d210c96006ad40de5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static QChar</type>
      <name>fromEntity</name>
      <anchorfile>classKCharsets.html</anchorfile>
      <anchor>a981697c45f6e13c96dee7a3517b080af</anchor>
      <arglist>(const QString &amp;str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static QChar</type>
      <name>fromEntity</name>
      <anchorfile>classKCharsets.html</anchorfile>
      <anchor>a405d03522b62829cf7fb44a421834b6a</anchor>
      <arglist>(const QString &amp;str, int &amp;len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static QString</type>
      <name>resolveEntities</name>
      <anchorfile>classKCharsets.html</anchorfile>
      <anchor>a0eab5c04cfd58c951986725f237f9dd8</anchor>
      <arglist>(const QString &amp;text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static QString</type>
      <name>toEntity</name>
      <anchorfile>classKCharsets.html</anchorfile>
      <anchor>a4354c9098bd54df0d90c9929f58f49b0</anchor>
      <arglist>(const QChar &amp;ch)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KCharsets</name>
      <anchorfile>classKCharsets.html</anchorfile>
      <anchor>a52c5056f4e32f564228c389f84c9024c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KEncodingProber</name>
    <filename>classKEncodingProber.html</filename>
    <member kind="enumvalue">
      <name>FoundIt</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>afdb257a93da4bd7affb3a988fb2acde2ad3fc2f12648af878674ccbcbea71b46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NotMe</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>afdb257a93da4bd7affb3a988fb2acde2a31571a93f45435786f928933950f1784</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProberState</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>afdb257a93da4bd7affb3a988fb2acde2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FoundIt</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>afdb257a93da4bd7affb3a988fb2acde2ad3fc2f12648af878674ccbcbea71b46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NotMe</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>afdb257a93da4bd7affb3a988fb2acde2a31571a93f45435786f928933950f1784</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Probing</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>afdb257a93da4bd7affb3a988fb2acde2a0a85f8dc83e90453189aa08e23e1a9b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Probing</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>afdb257a93da4bd7affb3a988fb2acde2a0a85f8dc83e90453189aa08e23e1a9b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KEncodingProber</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>a232811b65f3842311c57e82fb1bfa048</anchor>
      <arglist>(ProberType proberType=Universal)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>confidence</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>a63e1c3f0e58655e342e14e37d7da3a9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>encoding</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>aef3e8c57d4a3d79f963c671e9923f0ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ProberState</type>
      <name>feed</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>a32af3d6f4417cfa82c8452eeca3d6787</anchor>
      <arglist>(const QByteArray &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>a048a5568b38c3b08260034102acfef43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProberType</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>aa582212982d0fd7bc5a64b95d23296db</anchor>
      <arglist>(ProberType proberType)</arglist>
    </member>
    <member kind="function">
      <type>ProberState</type>
      <name>state</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>a5e9c46524afa24a5d822266a2c9816e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static QString</type>
      <name>nameForProberType</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>a1d56f6e15b929888d3b2e0a9c59560bd</anchor>
      <arglist>(ProberType proberType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProberType</type>
      <name>proberTypeForName</name>
      <anchorfile>classKEncodingProber.html</anchorfile>
      <anchor>af3d189b5f486eef9eb23cf1155c45111</anchor>
      <arglist>(const QString &amp;lang)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>KCodecs</name>
    <filename>namespaceKCodecs.html</filename>
    <class kind="class">KCodecs::Codec</class>
    <class kind="class">KCodecs::Decoder</class>
    <class kind="class">KCodecs::Encoder</class>
    <member kind="enumeration">
      <type></type>
      <name>CharsetOption</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>a7503d978abac260804bcdb4735e1be20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ForceDefaultCharset</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>a7503d978abac260804bcdb4735e1be20a9d2cc48bb5c073ffbce4441e51244e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>base64Decode</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>a2dc6013a601abddbfab43269689417dc</anchor>
      <arglist>(const QByteArray &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>base64Decode</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>aaf59fc45958198aaeaa31d7dc2f5db75</anchor>
      <arglist>(const QByteArray &amp;in, QByteArray &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>base64Encode</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>ad9cba091761bcc4e5650c71d7d5bcde7</anchor>
      <arglist>(const QByteArray &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>base64Encode</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>a0a1f133d370cab5fcfb8cafc6e4a513e</anchor>
      <arglist>(const QByteArray &amp;in, bool insertLFs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>base64Encode</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>a1cd22cc09c5b16f77e00512d9ee63517</anchor>
      <arglist>(const QByteArray &amp;in, QByteArray &amp;out, bool insertLFs=false)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>decodeRFC2047String</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>a2ef0e4b98dad2a6fc90f4dc229f83daf</anchor>
      <arglist>(const QString &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>decodeRFC2047String</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>a78d83945114fdcb496c3213e5ec5699a</anchor>
      <arglist>(const QByteArray &amp;src, QByteArray *usedCS, const QByteArray &amp;defaultCS=QByteArray(), CharsetOption option=NoOption)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>encodeRFC2047String</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>aef59d0cc356fa9cc655b333576343a79</anchor>
      <arglist>(const QString &amp;src, const QByteArray &amp;charset)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>quotedPrintableDecode</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>aa05f092666423624d4d225ecccd5dc94</anchor>
      <arglist>(const QByteArray &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quotedPrintableDecode</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>a539735d1f1687feafa4cd7a439e15e8e</anchor>
      <arglist>(const QByteArray &amp;in, QByteArray &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>quotedPrintableEncode</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>ac0c8d5cf01fd51767dfef5b21e16c186</anchor>
      <arglist>(const QByteArray &amp;in, bool useCRLF=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quotedPrintableEncode</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>aa8aa0e8e20d544682649a38e3e942096</anchor>
      <arglist>(const QByteArray &amp;in, QByteArray &amp;out, bool useCRLF)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>uudecode</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>ad1bffee4377cc4b53e6cac6f342848ac</anchor>
      <arglist>(const QByteArray &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uudecode</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>a902c4f51c04b33925d22a0036a50b9a9</anchor>
      <arglist>(const QByteArray &amp;in, QByteArray &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>uuencode</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>a7caef48fedd497b4c057ee90dd866027</anchor>
      <arglist>(const QByteArray &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uuencode</name>
      <anchorfile>namespaceKCodecs.html</anchorfile>
      <anchor>ad72327ae99c2ed60aa5033eb892f6a8b</anchor>
      <arglist>(const QByteArray &amp;in, QByteArray &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>KEmailAddress</name>
    <filename>namespaceKEmailAddress.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>EmailParseResult</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>gadc2d42daf24ca8b10c388aba8591fcd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AddressOk</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a45243beb78125b14aa00d49d1cb995ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AddressEmpty</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a6a7e808f46d0579c939dfdc75d70eff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnexpectedEnd</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a84f43f631b8f1ae23f2c208ff948fb8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnbalancedParens</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a16b0b364c2347eaa3d1b74ffb2b0caf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MissingDomainPart</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a1bd296accb6a4e3c2e7bc637d81d8065</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnclosedAngleAddr</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8aede38826223185bbf9ccff119ed4fb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnopenedAngleAddr</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8ac484f44e18a99c9601896f0e10f7514c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TooManyAts</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a3d19df0222fba79c1de04fc0f1639139</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnexpectedComma</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a23060c3639e86558293bfddcedf9542e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TooFewAts</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a487f1bd7f83580afbd9283aa5b366dc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MissingLocalPart</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8af68db225fc1b9f7e57e819dfed17156b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnbalancedQuote</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a0e72bc2fe61077caef9c42931eada4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DisallowedChar</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8aaaa0e1f433ce98621480ceed5b68762d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidDisplayName</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a5e40533d5344018c1b3b9276abf6bcfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TooFewDots</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a2c9ea07b1cc9cc949d4690bcc0e6310a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareEmail</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga9cf07bd2a58b8559334b082003fdba43</anchor>
      <arglist>(const QString &amp;email1, const QString &amp;email2, bool matchName)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>decodeMailtoUrl</name>
      <anchorfile>namespaceKEmailAddress.html</anchorfile>
      <anchor>a8d23df8a45aefe06acc0ef87ed121d6a</anchor>
      <arglist>(const QUrl &amp;mailtoUrl)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>emailParseResultToString</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>gae172704df0b6b5f39245919d47670400</anchor>
      <arglist>(EmailParseResult errorCode)</arglist>
    </member>
    <member kind="function">
      <type>QUrl</type>
      <name>encodeMailtoUrl</name>
      <anchorfile>namespaceKEmailAddress.html</anchorfile>
      <anchor>a8932bbff25f1acf10e43dcd80d8bbbe0</anchor>
      <arglist>(const QString &amp;mailbox)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>extractEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga1da04912802dd81372f09d81d5b62182</anchor>
      <arglist>(const QByteArray &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>extractEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga8d3f8bfe69ddce019c2e1901ead2174d</anchor>
      <arglist>(const QByteArray &amp;address, QString &amp;errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>extractEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>gae74d8378c98d252905e20580b2bb5614</anchor>
      <arglist>(const QString &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>extractEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>gaa161e55130d4b9975e33968df6bb0ede</anchor>
      <arglist>(const QString &amp;address, QString &amp;errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extractEmailAddressAndName</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga6c22c387968e1e515858afa50b65d7fe</anchor>
      <arglist>(const QString &amp;aStr, QString &amp;mail, QString &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>firstEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>gaa8fcb8ca19ea885161a89e3b6a9e680d</anchor>
      <arglist>(const QByteArray &amp;addresses)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>firstEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga26e2155efb91415fef8d129dc22e5852</anchor>
      <arglist>(const QByteArray &amp;addresses, QString &amp;errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>firstEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>gab37177a353e63490f70c7cb1b9f14bd5</anchor>
      <arglist>(const QString &amp;addresses)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>firstEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga0855fc94ddbf97bf7089b6b5d7906e0f</anchor>
      <arglist>(const QString &amp;addresses, QString &amp;errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>fromIdn</name>
      <anchorfile>group__emailidn.html</anchorfile>
      <anchor>ga066e392380fbc155ac9f81f73071a88e</anchor>
      <arglist>(const QString &amp;addrSpec)</arglist>
    </member>
    <member kind="function">
      <type>EmailParseResult</type>
      <name>isValidAddress</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga0718eac74f9d7e24b14dd230fc4726cb</anchor>
      <arglist>(const QString &amp;aStr)</arglist>
    </member>
    <member kind="function">
      <type>EmailParseResult</type>
      <name>isValidAddressList</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga726399c1d5ae00c2ed8fb9a8248ece53</anchor>
      <arglist>(const QString &amp;aStr, QString &amp;badAddr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidSimpleAddress</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>gabf08e03f2e2bd68905e76444c7e177d5</anchor>
      <arglist>(const QString &amp;aStr)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>normalizeAddressesAndDecodeIdn</name>
      <anchorfile>group__emailidn.html</anchorfile>
      <anchor>ga2c7bcc1fcb43afe6bd1fb8f4aeaccfaa</anchor>
      <arglist>(const QString &amp;addresses)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>normalizeAddressesAndEncodeIdn</name>
      <anchorfile>group__emailidn.html</anchorfile>
      <anchor>ga0db66b33487cb73dd1a7ec3e8bced4d4</anchor>
      <arglist>(const QString &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>normalizedAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga0c6a693a9b2d6395e39073c61712c1ff</anchor>
      <arglist>(const QString &amp;displayName, const QString &amp;addrSpec, const QString &amp;comment=QString())</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>quoteNameIfNecessary</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga3fa01cff1e4d8ba9e3a7647723c416fe</anchor>
      <arglist>(const QString &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>simpleEmailAddressErrorMsg</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga53bb072b3bb705a6b933dcb03c9f206a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EmailParseResult</type>
      <name>splitAddress</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga866c90ba0d3dba47be1e1c8eea104468</anchor>
      <arglist>(const QByteArray &amp;address, QByteArray &amp;displayName, QByteArray &amp;addrSpec, QByteArray &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>EmailParseResult</type>
      <name>splitAddress</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga1fbb08d0380070bc9907eb34c6664476</anchor>
      <arglist>(const QString &amp;address, QString &amp;displayName, QString &amp;addrSpec, QString &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>QStringList</type>
      <name>splitAddressList</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga772a8e69044154ce0935250558778ddd</anchor>
      <arglist>(const QString &amp;aStr)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>toIdn</name>
      <anchorfile>group__emailidn.html</anchorfile>
      <anchor>ga65e6620e7b4685c45c6a516fc1a22ca3</anchor>
      <arglist>(const QString &amp;addrSpec)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>emailvalidation</name>
    <title>Email Validation Functions</title>
    <filename>group__emailvalidation.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>EmailParseResult</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>gadc2d42daf24ca8b10c388aba8591fcd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AddressOk</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a45243beb78125b14aa00d49d1cb995ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AddressEmpty</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a6a7e808f46d0579c939dfdc75d70eff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnexpectedEnd</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a84f43f631b8f1ae23f2c208ff948fb8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnbalancedParens</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a16b0b364c2347eaa3d1b74ffb2b0caf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MissingDomainPart</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a1bd296accb6a4e3c2e7bc637d81d8065</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnclosedAngleAddr</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8aede38826223185bbf9ccff119ed4fb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnopenedAngleAddr</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8ac484f44e18a99c9601896f0e10f7514c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TooManyAts</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a3d19df0222fba79c1de04fc0f1639139</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnexpectedComma</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a23060c3639e86558293bfddcedf9542e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TooFewAts</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a487f1bd7f83580afbd9283aa5b366dc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MissingLocalPart</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8af68db225fc1b9f7e57e819dfed17156b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnbalancedQuote</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a0e72bc2fe61077caef9c42931eada4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DisallowedChar</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8aaaa0e1f433ce98621480ceed5b68762d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidDisplayName</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a5e40533d5344018c1b3b9276abf6bcfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TooFewDots</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ggadc2d42daf24ca8b10c388aba8591fcd8a2c9ea07b1cc9cc949d4690bcc0e6310a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>emailParseResultToString</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>gae172704df0b6b5f39245919d47670400</anchor>
      <arglist>(EmailParseResult errorCode)</arglist>
    </member>
    <member kind="function">
      <type>EmailParseResult</type>
      <name>isValidAddress</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga0718eac74f9d7e24b14dd230fc4726cb</anchor>
      <arglist>(const QString &amp;aStr)</arglist>
    </member>
    <member kind="function">
      <type>EmailParseResult</type>
      <name>isValidAddressList</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga726399c1d5ae00c2ed8fb9a8248ece53</anchor>
      <arglist>(const QString &amp;aStr, QString &amp;badAddr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidSimpleAddress</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>gabf08e03f2e2bd68905e76444c7e177d5</anchor>
      <arglist>(const QString &amp;aStr)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>simpleEmailAddressErrorMsg</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga53bb072b3bb705a6b933dcb03c9f206a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EmailParseResult</type>
      <name>splitAddress</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga866c90ba0d3dba47be1e1c8eea104468</anchor>
      <arglist>(const QByteArray &amp;address, QByteArray &amp;displayName, QByteArray &amp;addrSpec, QByteArray &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>EmailParseResult</type>
      <name>splitAddress</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga1fbb08d0380070bc9907eb34c6664476</anchor>
      <arglist>(const QString &amp;address, QString &amp;displayName, QString &amp;addrSpec, QString &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>QStringList</type>
      <name>splitAddressList</name>
      <anchorfile>group__emailvalidation.html</anchorfile>
      <anchor>ga772a8e69044154ce0935250558778ddd</anchor>
      <arglist>(const QString &amp;aStr)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>emailextraction</name>
    <title>Email Extraction Functions</title>
    <filename>group__emailextraction.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>compareEmail</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga9cf07bd2a58b8559334b082003fdba43</anchor>
      <arglist>(const QString &amp;email1, const QString &amp;email2, bool matchName)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>extractEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga1da04912802dd81372f09d81d5b62182</anchor>
      <arglist>(const QByteArray &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>extractEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga8d3f8bfe69ddce019c2e1901ead2174d</anchor>
      <arglist>(const QByteArray &amp;address, QString &amp;errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>extractEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>gae74d8378c98d252905e20580b2bb5614</anchor>
      <arglist>(const QString &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>extractEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>gaa161e55130d4b9975e33968df6bb0ede</anchor>
      <arglist>(const QString &amp;address, QString &amp;errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extractEmailAddressAndName</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga6c22c387968e1e515858afa50b65d7fe</anchor>
      <arglist>(const QString &amp;aStr, QString &amp;mail, QString &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>firstEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>gaa8fcb8ca19ea885161a89e3b6a9e680d</anchor>
      <arglist>(const QByteArray &amp;addresses)</arglist>
    </member>
    <member kind="function">
      <type>QByteArray</type>
      <name>firstEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga26e2155efb91415fef8d129dc22e5852</anchor>
      <arglist>(const QByteArray &amp;addresses, QString &amp;errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>firstEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>gab37177a353e63490f70c7cb1b9f14bd5</anchor>
      <arglist>(const QString &amp;addresses)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>firstEmailAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga0855fc94ddbf97bf7089b6b5d7906e0f</anchor>
      <arglist>(const QString &amp;addresses, QString &amp;errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>normalizedAddress</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga0c6a693a9b2d6395e39073c61712c1ff</anchor>
      <arglist>(const QString &amp;displayName, const QString &amp;addrSpec, const QString &amp;comment=QString())</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>quoteNameIfNecessary</name>
      <anchorfile>group__emailextraction.html</anchorfile>
      <anchor>ga3fa01cff1e4d8ba9e3a7647723c416fe</anchor>
      <arglist>(const QString &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>emailidn</name>
    <title>Email IDN (punycode) handling</title>
    <filename>group__emailidn.html</filename>
    <member kind="function">
      <type>QString</type>
      <name>fromIdn</name>
      <anchorfile>group__emailidn.html</anchorfile>
      <anchor>ga066e392380fbc155ac9f81f73071a88e</anchor>
      <arglist>(const QString &amp;addrSpec)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>normalizeAddressesAndDecodeIdn</name>
      <anchorfile>group__emailidn.html</anchorfile>
      <anchor>ga2c7bcc1fcb43afe6bd1fb8f4aeaccfaa</anchor>
      <arglist>(const QString &amp;addresses)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>normalizeAddressesAndEncodeIdn</name>
      <anchorfile>group__emailidn.html</anchorfile>
      <anchor>ga0db66b33487cb73dd1a7ec3e8bced4d4</anchor>
      <arglist>(const QString &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>toIdn</name>
      <anchorfile>group__emailidn.html</anchorfile>
      <anchor>ga65e6620e7b4685c45c6a516fc1a22ca3</anchor>
      <arglist>(const QString &amp;addrSpec)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>KCodecs</title>
    <filename>index</filename>
  </compound>
</tagfile>
